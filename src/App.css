.App {
	text-align: center;
	background-color: white;
	height: 100vh;
	display: flex;
	flex-direction: column;
	justify-content: center; /* This will center the items vertically. */
	align-items: center; /* This will center the items horizontally. */
	padding: 20px; /* Adding some padding can prevent items from sticking to the edge. */
}

.music-sheet {
	width: 50vw;
	height: 50vh;
}

.buttons-row {
	display: flex;
	justify-content: space-between; /* This will distribute the space between buttons. */
	padding: 0 5vw; /* 5% of the viewport width padding on the left and right. */
	margin-top: 2em; /* Relative to the font-size of the document. */
	width: 90vw; /* 90% of the viewport width. */
	height: 12vw;
	/* max-width: 600px; /* You can adjust this if needed to ensure it doesn't get too wide on large screens. */
}

.buttons-row button {
	flex: 1; /* This makes each button take an equal amount of space within the row. */
	padding: 1em 1em; /* You can adjust the padding here. This is relative to the font-size. */
	margin: 0 0.5vw; /* 0.5% of the viewport width as horizontal margin. */
	border: 1px solid gray;
	cursor: pointer;
	transition: background-color 0.3s;
	text-align: center; /* Ensures text is centered even if button is stretched. */
	font-size: 3.5vw;
}

.buttons-row button:first-child {
	margin-left: 0; /* No left margin for the first button. */
}

.buttons-row button:last-child {
	margin-right: 0; /* No right margin for the last button. */
}

.buttons-row button:focus {
	outline: none;
}

.feedback {
	height: 3em;
	line-height: 3em;
	font-size: 2em;
	/* This will ensure the text stays vertically centered within the fixed height */
}

@keyframes fadeOut {
	from {
		opacity: 1;
	}
	to {
		opacity: 0;
	}
}

.faded {
	animation: fadeOut 1s forwards;
}

.score-display {
	font-size: 2rem; /* adjust as needed */
	margin-left: 20px; /* adjust as needed */
}

.correct {
	color: green;
}

.incorrect {
	color: red;
}
